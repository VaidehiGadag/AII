import networkx as nx
import matplotlib.pyplot as plt
from collections import deque


# Custom BFS implementation
def bfs(G, start, target):
    # Initialize queue for BFS, visited nodes set, and parent dictionary
    queue = deque([start])
    visited = set([start])
    parent = {start: None}

    while queue:
        node = queue.popleft()

        # If we reached the target node, backtrack to form the path
        if node == target:
            path = []
            while node is not None:
                path.append(node)
                node = parent[node]
            return path[::-1]  # Return reversed path from start to target

        # Explore neighbors
        for neighbor in G.neighbors(node):
            if neighbor not in visited:
                visited.add(neighbor)
                parent[neighbor] = node
                queue.append(neighbor)

    return []  # Return empty if no path is found


# Create a new graph
G = nx.Graph()

# Add nodes with IP addresses
ip_addresses = {
    1: "192.168.1.1",
    2: "192.168.1.2",
    3: "192.168.1.3",
    4: "192.168.1.4",
    5: "192.168.1.5",
    6: "192.168.1.6",
}

# Adding nodes to the graph
for node, ip in ip_addresses.items():
    G.add_node(node, ip=ip)

# Define more dense connections between nodes (edges) with uneven weights
connections = [
    (1, 2, 5),
    (1, 3, 3),
    (1, 4, 1),
    (2, 5, 6),
    (3, 6, 7),
    (4, 5, 2),
    (4, 6, 4),
    (5, 6, 3),
]

# Add edges (connections) with weights to the graph
G.add_weighted_edges_from(connections)

# Perform BFS to find the shortest path from node D (4) to node C (3)
shortest_path = bfs(G, start=4, target=3)

# Create a layout for the nodes (positioning them in a spring layout)
pos = nx.spring_layout(G, seed=42)  # seed ensures consistent layout

# Draw the graph with the labels (IP addresses)
plt.figure(figsize=(8, 6))

# Draw all edges and nodes
nx.draw(
    G,
    pos,
    with_labels=False,
    node_size=3000,
    node_color="lightblue",
    font_size=10,
    font_weight="bold",
)

# Add labels for the IP addresses
node_labels = nx.get_node_attributes(G, "ip")

# Alphabetic labels for the nodes
alphabetic_labels = {node: chr(65 + node - 1) for node in G.nodes()}

# Adjust label positions to place IP addresses beside the nodes
label_pos = {
    key: (value[0] + 0.1, value[1]) for key, value in pos.items()
}  # Move IP labels slightly to the right

# Adjust positions of the alphabetic labels to be at the center of the nodes
alphabetic_label_pos = pos.copy()

# Display alphabetic labels at the center of nodes
nx.draw_networkx_labels(
    G, alphabetic_label_pos, labels=alphabetic_labels, font_size=10, font_color="blue"
)

# Display IP address labels beside the nodes (with slight offset to avoid overlap)
nx.draw_networkx_labels(G, label_pos, labels=node_labels, font_size=8, font_color="red")

# Highlight the path (nodes and edges)
path_edges = list(zip(shortest_path, shortest_path[1:]))  # edges in the path
path_nodes = set(shortest_path)

# Draw the highlighted path nodes
nx.draw_networkx_nodes(G, pos, nodelist=path_nodes, node_color="yellow", node_size=3000)

# Draw the highlighted path edges
nx.draw_networkx_edges(G, pos, edgelist=path_edges, edge_color="orange", width=2)

# Draw the edges and label the edge weights
nx.draw_networkx_edge_labels(
    G,
    pos,
    edge_labels={(u, v): f"{d['weight']}" for u, v, d in G.edges(data=True)},
    font_size=8,
    font_color="green",
)

# Show the plot
plt.title("Computer Network with Custom BFS Path from D to C (Uneven Distances)")
plt.axis("off")  # Hide axes for a cleaner look
plt.show()
