import heapq

# Goal state
goal_state = ((1, 2, 3), (4, 5, 6), (7, 8, 0))  # 0 represents the blank tile

# Possible directions to move: up, down, left, right
moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]

# Heuristic: Manhattan distance
def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state[i][j]
            if value != 0:
                goal_i, goal_j = divmod(value - 1, 3)
                distance += abs(goal_i - i) + abs(goal_j - j)
    return distance

# A* Algorithm
def a_star_8_puzzle(start_state):
    open_set = []  # Priority queue (min-heap)
    heapq.heappush(open_set, (manhattan_distance(start_state), 0, start_state, None))
    
    came_from = {}  # To trace the path
    g_score = {start_state: 0}

    while open_set:
        _, g, current, parent = heapq.heappop(open_set)
        
        if current == goal_state:
            # Reconstruct path
            path = []
            while current:
                path.append(current)
                current = came_from.get(current)
            return path[::-1]  # Reverse the path

        # Find the blank (0) position
        for i in range(3):
            for j in range(3):
                if current[i][j] == 0:
                    x, y = i, j
                    break

        # Try all moves
        for dx, dy in moves:
            new_x, new_y = x + dx, y + dy
            if 0 <= new_x < 3 and 0 <= new_y < 3:
                # Swap 0 with the new position
                new_state = [list(row) for row in current]
                new_state[x][y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[x][y]
                new_state = tuple(tuple(row) for row in new_state)

                tentative_g = g + 1
                if new_state not in g_score or tentative_g < g_score[new_state]:
                    g_score[new_state] = tentative_g
                    f_score = tentative_g + manhattan_distance(new_state)
                    heapq.heappush(open_set, (f_score, tentative_g, new_state, current))
                    came_from[new_state] = current

    return None  # No solution found

# Example input
start_state = ((0, 2, 3), (1, 5, 6), (4, 7, 8))

# Run the algorithm
solution_path = a_star_8_puzzle(start_state)

# Print the solution
if solution_path:
    print("Solution path:")
    for state in solution_path:
        for row in state:
            print(row)
        print()
else:
    print("No solution found.")
